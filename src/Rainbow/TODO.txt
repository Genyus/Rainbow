// TODO: WFFM can create items whose names are too long to fit on the FS. Need to detect this and force the item to be named by ID for that. #34
// TODO: use BulkUpdateContext() during a sync - after testing perf - to speed up adding many items. Should be optional as this causes publish queue to not get updated.
// TODO: more tests. yo dawg...
// TODO: Replace client serialize commands with unicorn config aware ones that conditionally use Uni configs
// TODO: SPE extensions
	- Get-RainbowItemData: Gets IItemData from a sitecore item (or disk?)
	- Export-SerializedItem: Serialize an item with a specified formatter, to cmd output
	- Import-SerializedItem -Data $serializedItem: Loads an item from a formatter into Sitecore
	- Sync-UnicornConfiguration -Config "Default Configuration"
	- Export-UnicornConfiguration (runs reserialize)

// 3.1: roles support
// 3.1: additional path providers/refactored path provider?
// 3.1: consistency checking (in unicorn control panel and SFS)
// 3.1: parallel tree syncing, at a top level tree point and or config level- if it helps. may need to allow trees to opt out and load first eg templates
// 3.2: formatting of security field values?

SECURITY REVENGE!

No rules = blank
Assign author read rights (no inherit, descendants):
ar|sitecore\Author|pe|+item:read|
ar|sitecore\Author|pe|+item:read|pd|+item:read| 	read w/descendants
ar|sitecore\Author|pe|+item:read|^*|pd|+item:read|	read w/global inherit on
ar|sitecore\Author|pe|+item:read|^*|pd|+item:read|^*|	read w/global inherit and global inherit desc on
au|default\Anonymous|pe|+item:read| 	read w/user account (au vs ar)
ar|sitecore\Designer|pe|+item:read|ar|sitecore\Author|pe|+item:read|	read, two roles

Format:
[ar|au]|[username]|[permtype (pe=item, pd=descendants)]|[+/- (allow/deny)][right]|[right...]|[^* (global descendants)]|

e.g.:

au|sitecore\foo|pe|+item:read| (foo granted read, note trailing pipe always present)
ar|sitecore\role|pd|+item:read|+item:write|-item:admin| (role granted read and write, denied administer on descendants)
ar|sitecore\foo|pe|+item:read|au|sitecore\bar|pe|+item:write| (foo granted read, bar granted write)

Note: pd (descendants) rules always come after pe (item) in the pipes

NOTE: there seems to be no rhyme or reason to the ordering of rights (because internally they are written from a dictionary whose enumeration order is undefined)

Sitecore.Security.AccessControl.AccessRuleSerializer seems to convert to and from the object model; there is no direct field type